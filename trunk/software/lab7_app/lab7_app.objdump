
lab7_app.elf:     file format elf32-littlenios2
lab7_app.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000020

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x000008e8 memsz 0x000008e8 flags r-x
    LOAD off    0x00001908 vaddr 0x10000908 paddr 0x10000ed0 align 2**12
         filesz 0x000005c8 memsz 0x000005c8 flags rw-
    LOAD off    0x00002498 vaddr 0x10001498 paddr 0x10001498 align 2**12
         filesz 0x00000000 memsz 0x000001a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         000008d8  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  100008f8  100008f8  000018f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       000005c8  10000908  10000ed0  00001908  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          000001a0  10001498  10001498  00002498  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000023  00000000  00000000  00001ed0  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000002b0  00000000  00000000  00001ef8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003e6a  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001153  00000000  00000000  00006012  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001376  00000000  00000000  00007165  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000360  00000000  00000000  000084dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000d73  00000000  00000000  0000883c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000732  00000000  00000000  000095af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  00009ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000038  00000000  00000000  00009cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  0000aeac  2**0
                  CONTENTS, READONLY
 16 .cpu          0000000c  00000000  00000000  0000aeaf  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  0000aebb  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  0000aebc  2**0
                  CONTENTS, READONLY
 19 .sysid_hash   00000004  00000000  00000000  0000aebd  2**0
                  CONTENTS, READONLY
 20 .sysid_base   00000004  00000000  00000000  0000aec1  2**0
                  CONTENTS, READONLY
 21 .sysid_time   00000004  00000000  00000000  0000aec5  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000004  00000000  00000000  0000aec9  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000004  00000000  00000000  0000aecd  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000004  00000000  00000000  0000aed1  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000008  00000000  00000000  0000aed5  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000011  00000000  00000000  0000aedd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00055eb0  00000000  00000000  0000aeee  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .text	00000000 .text
100008f8 l    d  .rodata	00000000 .rodata
10000908 l    d  .rwdata	00000000 .rwdata
10001498 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab7_app_bsp//obj/HAL/src/crt0.o
10000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 alt_load.c
10000104 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 alt_close.c
100002a0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
100003d8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
10000ab0 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
100001f0 g     F .text	0000005c alt_main
10000ed0 g       *ABS*	00000000 __flash_rwdata_start
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
100014a4 g     O .bss	00000004 errno
1000149c g     O .bss	00000004 alt_argv
10008eb0 g       *ABS*	00000000 _gp
10000930 g     O .rwdata	00000180 alt_fd_list
100008f8 g       *ABS*	00000000 __DTOR_END__
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10000ec0 g     O .rwdata	00000004 alt_max_fd
10000ec8 g     O .rwdata	00000004 _global_impure_ptr
10001638 g       *ABS*	00000000 __bss_end
10000908 g     O .rwdata	00000028 alt_dev_null
100003bc g     F .text	0000001c alt_dcache_flush_all
10000ed0 g       *ABS*	00000000 __ram_rwdata_end
10000eb8 g     O .rwdata	00000008 alt_dev_list
10000908 g       *ABS*	00000000 __ram_rodata_end
10001638 g       *ABS*	00000000 end
100008f8 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100006f4 g     F .text	000001a0 __call_exitprocs
10000020 g     F .text	0000003c _start
10000280 g     F .text	00000020 alt_sys_init
100005c4 g     F .text	00000130 __register_exitproc
10000894 g     F .text	00000028 __mulsi3
10000908 g       *ABS*	00000000 __ram_rwdata_start
100008f8 g       *ABS*	00000000 __ram_rodata_start
10001638 g       *ABS*	00000000 __alt_stack_base
10001498 g       *ABS*	00000000 __bss_start
1000005c g     F .text	000000a8 main
100014a0 g     O .bss	00000004 alt_envp
100014a8 g     O .bss	00000190 _atexit0
10000ec4 g     O .rwdata	00000004 alt_errno
100008f8 g       *ABS*	00000000 __CTOR_END__
100008f8 g       *ABS*	00000000 __flash_rodata_start
100008f8 g       *ABS*	00000000 __DTOR_LIST__
1000024c g     F .text	00000034 alt_irq_init
100004d8 g     F .text	00000080 alt_release_fd
10000578 g     F .text	00000014 atexit
10000ecc g     O .rwdata	00000004 _impure_ptr
10001498 g     O .bss	00000004 alt_argc
10000460 g     F .text	0000005c _do_dtors
10000eb0 g     O .rwdata	00000008 alt_fs_list
10000020 g       *ABS*	00000000 __ram_exceptions_start
10000ed0 g       *ABS*	00000000 _edata
10001638 g       *ABS*	00000000 _end
10000020 g       *ABS*	00000000 __ram_exceptions_end
10000558 g     F .text	00000020 altera_nios2_qsys_irq_init
1000058c g     F .text	00000038 exit
18000000 g       *ABS*	00000000 __alt_data_end
10000000 g       *ABS*	00000000 __alt_mem_sdram
100008bc g     F .text	0000003c _exit
100004bc g     F .text	0000001c alt_icache_flush_all
10000404 g     F .text	0000005c _do_ctors
100002f0 g     F .text	000000cc close
10000170 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08400814 	ori	at,at,32
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .text:

10000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000020:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000024:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000028:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000002c:	d6a3ac14 	ori	gp,gp,36528
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000030:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000034:	10852614 	ori	r2,r2,5272

    movhi r3, %hi(__bss_end)
10000038:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000003c:	18c58e14 	ori	r3,r3,5688

    beq r2, r3, 1f
10000040:	10c00326 	beq	r2,r3,10000050 <_start+0x30>

0:
    stw zero, (r2)
10000044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000004c:	10fffd36 	bltu	r2,r3,10000044 <__alt_data_end+0xf8000044>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000050:	00001700 	call	10000170 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000054:	00001f00 	call	100001f0 <alt_main>

10000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000058:	003fff06 	br	10000058 <__alt_data_end+0xf8000058>

1000005c <main>:
// Main.c - makes LEDG0 on DE2-115 board blink if NIOS II is set up correctly
// for ECE 385 - University of Illinois - Electrical and Computer Engineering
// Author: Zuofu Cheng

int main()
{
1000005c:	defffa04 	addi	sp,sp,-24
10000060:	df000515 	stw	fp,20(sp)
10000064:	df000504 	addi	fp,sp,20
	volatile unsigned int *LED_PIO = (unsigned int*)0x60; //make a pointer to access the PIO block
10000068:	00801804 	movi	r2,96
1000006c:	e0bffc15 	stw	r2,-16(fp)
	volatile unsigned int *SW_PIO = (unsigned int*)0x40;
10000070:	00801004 	movi	r2,64
10000074:	e0bffd15 	stw	r2,-12(fp)
	volatile unsigned int *KEY2_PIO = (unsigned int*)0x30; //Reset
10000078:	00800c04 	movi	r2,48
1000007c:	e0bffe15 	stw	r2,-8(fp)
	volatile unsigned int *KEY3_PIO = (unsigned int*)0x20; //Accumulate
10000080:	00800804 	movi	r2,32
10000084:	e0bfff15 	stw	r2,-4(fp)
	int accumulate = 0;
10000088:	e03ffb15 	stw	zero,-20(fp)

	*LED_PIO = 0; //clear all LEDs
1000008c:	e0bffc17 	ldw	r2,-16(fp)
10000090:	10000015 	stw	zero,0(r2)
10000094:	00000106 	br	1000009c <main+0x40>
			accumulate = 1;
		}
		if (*KEY3_PIO == 0x0) {
			accumulate = 0;
		}
	}
10000098:	0001883a 	nop
	//*KEY2_PIO = 0;
	//*KEY3_PIO = 0;

	while (1)
	{
		if (*KEY2_PIO == 0x1) {
1000009c:	e0bffe17 	ldw	r2,-8(fp)
100000a0:	10800017 	ldw	r2,0(r2)
100000a4:	10800058 	cmpnei	r2,r2,1
100000a8:	1000021e 	bne	r2,zero,100000b4 <main+0x58>
			*LED_PIO = 0;
100000ac:	e0bffc17 	ldw	r2,-16(fp)
100000b0:	10000015 	stw	zero,0(r2)
		}
		if (*KEY3_PIO == 0x1 && (accumulate == 0)) {
100000b4:	e0bfff17 	ldw	r2,-4(fp)
100000b8:	10800017 	ldw	r2,0(r2)
100000bc:	10800058 	cmpnei	r2,r2,1
100000c0:	10000b1e 	bne	r2,zero,100000f0 <main+0x94>
100000c4:	e0bffb17 	ldw	r2,-20(fp)
100000c8:	1000091e 	bne	r2,zero,100000f0 <main+0x94>
			*LED_PIO += *SW_PIO;
100000cc:	e0bffc17 	ldw	r2,-16(fp)
100000d0:	10c00017 	ldw	r3,0(r2)
100000d4:	e0bffd17 	ldw	r2,-12(fp)
100000d8:	10800017 	ldw	r2,0(r2)
100000dc:	1887883a 	add	r3,r3,r2
100000e0:	e0bffc17 	ldw	r2,-16(fp)
100000e4:	10c00015 	stw	r3,0(r2)
			accumulate = 1;
100000e8:	00800044 	movi	r2,1
100000ec:	e0bffb15 	stw	r2,-20(fp)
		}
		if (*KEY3_PIO == 0x0) {
100000f0:	e0bfff17 	ldw	r2,-4(fp)
100000f4:	10800017 	ldw	r2,0(r2)
100000f8:	103fe71e 	bne	r2,zero,10000098 <__alt_data_end+0xf8000098>
			accumulate = 0;
100000fc:	e03ffb15 	stw	zero,-20(fp)
		}
	}
10000100:	003fe506 	br	10000098 <__alt_data_end+0xf8000098>

10000104 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10000104:	defffc04 	addi	sp,sp,-16
10000108:	df000315 	stw	fp,12(sp)
1000010c:	df000304 	addi	fp,sp,12
10000110:	e13ffd15 	stw	r4,-12(fp)
10000114:	e17ffe15 	stw	r5,-8(fp)
10000118:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000011c:	e0fffe17 	ldw	r3,-8(fp)
10000120:	e0bffd17 	ldw	r2,-12(fp)
10000124:	18800e26 	beq	r3,r2,10000160 <alt_load_section+0x5c>
  {
    while( to != end )
10000128:	00000a06 	br	10000154 <alt_load_section+0x50>
    {
      *to++ = *from++;
1000012c:	e0bffd17 	ldw	r2,-12(fp)
10000130:	10c00017 	ldw	r3,0(r2)
10000134:	e0bffe17 	ldw	r2,-8(fp)
10000138:	10c00015 	stw	r3,0(r2)
1000013c:	e0bffe17 	ldw	r2,-8(fp)
10000140:	10800104 	addi	r2,r2,4
10000144:	e0bffe15 	stw	r2,-8(fp)
10000148:	e0bffd17 	ldw	r2,-12(fp)
1000014c:	10800104 	addi	r2,r2,4
10000150:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10000154:	e0fffe17 	ldw	r3,-8(fp)
10000158:	e0bfff17 	ldw	r2,-4(fp)
1000015c:	18bff31e 	bne	r3,r2,1000012c <__alt_data_end+0xf800012c>
    {
      *to++ = *from++;
    }
  }
}
10000160:	e037883a 	mov	sp,fp
10000164:	df000017 	ldw	fp,0(sp)
10000168:	dec00104 	addi	sp,sp,4
1000016c:	f800283a 	ret

10000170 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10000170:	defffe04 	addi	sp,sp,-8
10000174:	dfc00115 	stw	ra,4(sp)
10000178:	df000015 	stw	fp,0(sp)
1000017c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10000180:	01040034 	movhi	r4,4096
10000184:	2103b404 	addi	r4,r4,3792
10000188:	01440034 	movhi	r5,4096
1000018c:	29424204 	addi	r5,r5,2312
10000190:	01840034 	movhi	r6,4096
10000194:	3183b404 	addi	r6,r6,3792
10000198:	00001040 	call	10000104 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000019c:	01040034 	movhi	r4,4096
100001a0:	21000804 	addi	r4,r4,32
100001a4:	01440034 	movhi	r5,4096
100001a8:	29400804 	addi	r5,r5,32
100001ac:	01840034 	movhi	r6,4096
100001b0:	31800804 	addi	r6,r6,32
100001b4:	00001040 	call	10000104 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
100001b8:	01040034 	movhi	r4,4096
100001bc:	21023e04 	addi	r4,r4,2296
100001c0:	01440034 	movhi	r5,4096
100001c4:	29423e04 	addi	r5,r5,2296
100001c8:	01840034 	movhi	r6,4096
100001cc:	31824204 	addi	r6,r6,2312
100001d0:	00001040 	call	10000104 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
100001d4:	00003bc0 	call	100003bc <alt_dcache_flush_all>
  alt_icache_flush_all();
100001d8:	00004bc0 	call	100004bc <alt_icache_flush_all>
}
100001dc:	e037883a 	mov	sp,fp
100001e0:	dfc00117 	ldw	ra,4(sp)
100001e4:	df000017 	ldw	fp,0(sp)
100001e8:	dec00204 	addi	sp,sp,8
100001ec:	f800283a 	ret

100001f0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
100001f0:	defffd04 	addi	sp,sp,-12
100001f4:	dfc00215 	stw	ra,8(sp)
100001f8:	df000115 	stw	fp,4(sp)
100001fc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10000200:	0009883a 	mov	r4,zero
10000204:	000024c0 	call	1000024c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10000208:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000020c:	00002800 	call	10000280 <alt_sys_init>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10000210:	00004040 	call	10000404 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10000214:	01040034 	movhi	r4,4096
10000218:	21011804 	addi	r4,r4,1120
1000021c:	00005780 	call	10000578 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10000220:	d1217a17 	ldw	r4,-31256(gp)
10000224:	d0e17b17 	ldw	r3,-31252(gp)
10000228:	d0a17c17 	ldw	r2,-31248(gp)
1000022c:	180b883a 	mov	r5,r3
10000230:	100d883a 	mov	r6,r2
10000234:	000005c0 	call	1000005c <main>
10000238:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000023c:	01000044 	movi	r4,1
10000240:	00002f00 	call	100002f0 <close>
  exit (result);
10000244:	e13fff17 	ldw	r4,-4(fp)
10000248:	000058c0 	call	1000058c <exit>

1000024c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000024c:	defffd04 	addi	sp,sp,-12
10000250:	dfc00215 	stw	ra,8(sp)
10000254:	df000115 	stw	fp,4(sp)
10000258:	df000104 	addi	fp,sp,4
1000025c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
10000260:	00005580 	call	10000558 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10000264:	00800044 	movi	r2,1
10000268:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000026c:	e037883a 	mov	sp,fp
10000270:	dfc00117 	ldw	ra,4(sp)
10000274:	df000017 	ldw	fp,0(sp)
10000278:	dec00204 	addi	sp,sp,8
1000027c:	f800283a 	ret

10000280 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10000280:	deffff04 	addi	sp,sp,-4
10000284:	df000015 	stw	fp,0(sp)
10000288:	d839883a 	mov	fp,sp
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000028c:	0001883a 	nop
}
10000290:	e037883a 	mov	sp,fp
10000294:	df000017 	ldw	fp,0(sp)
10000298:	dec00104 	addi	sp,sp,4
1000029c:	f800283a 	ret

100002a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
100002a0:	defffe04 	addi	sp,sp,-8
100002a4:	dfc00115 	stw	ra,4(sp)
100002a8:	df000015 	stw	fp,0(sp)
100002ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
100002b0:	00840034 	movhi	r2,4096
100002b4:	1083b104 	addi	r2,r2,3780
100002b8:	10800017 	ldw	r2,0(r2)
100002bc:	10000526 	beq	r2,zero,100002d4 <alt_get_errno+0x34>
100002c0:	00840034 	movhi	r2,4096
100002c4:	1083b104 	addi	r2,r2,3780
100002c8:	10800017 	ldw	r2,0(r2)
100002cc:	103ee83a 	callr	r2
100002d0:	00000206 	br	100002dc <alt_get_errno+0x3c>
100002d4:	00840034 	movhi	r2,4096
100002d8:	10852904 	addi	r2,r2,5284
}
100002dc:	e037883a 	mov	sp,fp
100002e0:	dfc00117 	ldw	ra,4(sp)
100002e4:	df000017 	ldw	fp,0(sp)
100002e8:	dec00204 	addi	sp,sp,8
100002ec:	f800283a 	ret

100002f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
100002f0:	defffb04 	addi	sp,sp,-20
100002f4:	dfc00415 	stw	ra,16(sp)
100002f8:	df000315 	stw	fp,12(sp)
100002fc:	df000304 	addi	fp,sp,12
10000300:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10000304:	e0bfff17 	ldw	r2,-4(fp)
10000308:	10000716 	blt	r2,zero,10000328 <close+0x38>
1000030c:	e13fff17 	ldw	r4,-4(fp)
10000310:	01400304 	movi	r5,12
10000314:	00008940 	call	10000894 <__mulsi3>
10000318:	00c40034 	movhi	r3,4096
1000031c:	18c24c04 	addi	r3,r3,2352
10000320:	10c5883a 	add	r2,r2,r3
10000324:	00000106 	br	1000032c <close+0x3c>
10000328:	0005883a 	mov	r2,zero
1000032c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10000330:	e0bffd17 	ldw	r2,-12(fp)
10000334:	10001826 	beq	r2,zero,10000398 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10000338:	e0bffd17 	ldw	r2,-12(fp)
1000033c:	10800017 	ldw	r2,0(r2)
10000340:	10800417 	ldw	r2,16(r2)
10000344:	10000626 	beq	r2,zero,10000360 <close+0x70>
10000348:	e0bffd17 	ldw	r2,-12(fp)
1000034c:	10800017 	ldw	r2,0(r2)
10000350:	10800417 	ldw	r2,16(r2)
10000354:	e13ffd17 	ldw	r4,-12(fp)
10000358:	103ee83a 	callr	r2
1000035c:	00000106 	br	10000364 <close+0x74>
10000360:	0005883a 	mov	r2,zero
10000364:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10000368:	e13fff17 	ldw	r4,-4(fp)
1000036c:	00004d80 	call	100004d8 <alt_release_fd>
    if (rval < 0)
10000370:	e0bffe17 	ldw	r2,-8(fp)
10000374:	1000060e 	bge	r2,zero,10000390 <close+0xa0>
    {
      ALT_ERRNO = -rval;
10000378:	00002a00 	call	100002a0 <alt_get_errno>
1000037c:	e0fffe17 	ldw	r3,-8(fp)
10000380:	00c7c83a 	sub	r3,zero,r3
10000384:	10c00015 	stw	r3,0(r2)
      return -1;
10000388:	00bfffc4 	movi	r2,-1
1000038c:	00000606 	br	100003a8 <close+0xb8>
    }
    return 0;
10000390:	0005883a 	mov	r2,zero
10000394:	00000406 	br	100003a8 <close+0xb8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10000398:	00002a00 	call	100002a0 <alt_get_errno>
1000039c:	00c01444 	movi	r3,81
100003a0:	10c00015 	stw	r3,0(r2)
    return -1;
100003a4:	00bfffc4 	movi	r2,-1
  }
}
100003a8:	e037883a 	mov	sp,fp
100003ac:	dfc00117 	ldw	ra,4(sp)
100003b0:	df000017 	ldw	fp,0(sp)
100003b4:	dec00204 	addi	sp,sp,8
100003b8:	f800283a 	ret

100003bc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
100003bc:	deffff04 	addi	sp,sp,-4
100003c0:	df000015 	stw	fp,0(sp)
100003c4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
100003c8:	e037883a 	mov	sp,fp
100003cc:	df000017 	ldw	fp,0(sp)
100003d0:	dec00104 	addi	sp,sp,4
100003d4:	f800283a 	ret

100003d8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
100003d8:	defffc04 	addi	sp,sp,-16
100003dc:	df000315 	stw	fp,12(sp)
100003e0:	df000304 	addi	fp,sp,12
100003e4:	e13ffd15 	stw	r4,-12(fp)
100003e8:	e17ffe15 	stw	r5,-8(fp)
100003ec:	e1bfff15 	stw	r6,-4(fp)
  return len;
100003f0:	e0bfff17 	ldw	r2,-4(fp)
}
100003f4:	e037883a 	mov	sp,fp
100003f8:	df000017 	ldw	fp,0(sp)
100003fc:	dec00104 	addi	sp,sp,4
10000400:	f800283a 	ret

10000404 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10000404:	defffd04 	addi	sp,sp,-12
10000408:	dfc00215 	stw	ra,8(sp)
1000040c:	df000115 	stw	fp,4(sp)
10000410:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10000414:	00840034 	movhi	r2,4096
10000418:	10823d04 	addi	r2,r2,2292
1000041c:	e0bfff15 	stw	r2,-4(fp)
10000420:	00000606 	br	1000043c <_do_ctors+0x38>
        (*ctor) (); 
10000424:	e0bfff17 	ldw	r2,-4(fp)
10000428:	10800017 	ldw	r2,0(r2)
1000042c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10000430:	e0bfff17 	ldw	r2,-4(fp)
10000434:	10bfff04 	addi	r2,r2,-4
10000438:	e0bfff15 	stw	r2,-4(fp)
1000043c:	e0ffff17 	ldw	r3,-4(fp)
10000440:	00840034 	movhi	r2,4096
10000444:	10823e04 	addi	r2,r2,2296
10000448:	18bff62e 	bgeu	r3,r2,10000424 <__alt_data_end+0xf8000424>
        (*ctor) (); 
}
1000044c:	e037883a 	mov	sp,fp
10000450:	dfc00117 	ldw	ra,4(sp)
10000454:	df000017 	ldw	fp,0(sp)
10000458:	dec00204 	addi	sp,sp,8
1000045c:	f800283a 	ret

10000460 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10000460:	defffd04 	addi	sp,sp,-12
10000464:	dfc00215 	stw	ra,8(sp)
10000468:	df000115 	stw	fp,4(sp)
1000046c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10000470:	00840034 	movhi	r2,4096
10000474:	10823d04 	addi	r2,r2,2292
10000478:	e0bfff15 	stw	r2,-4(fp)
1000047c:	00000606 	br	10000498 <_do_dtors+0x38>
        (*dtor) (); 
10000480:	e0bfff17 	ldw	r2,-4(fp)
10000484:	10800017 	ldw	r2,0(r2)
10000488:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
1000048c:	e0bfff17 	ldw	r2,-4(fp)
10000490:	10bfff04 	addi	r2,r2,-4
10000494:	e0bfff15 	stw	r2,-4(fp)
10000498:	e0ffff17 	ldw	r3,-4(fp)
1000049c:	00840034 	movhi	r2,4096
100004a0:	10823e04 	addi	r2,r2,2296
100004a4:	18bff62e 	bgeu	r3,r2,10000480 <__alt_data_end+0xf8000480>
        (*dtor) (); 
}
100004a8:	e037883a 	mov	sp,fp
100004ac:	dfc00117 	ldw	ra,4(sp)
100004b0:	df000017 	ldw	fp,0(sp)
100004b4:	dec00204 	addi	sp,sp,8
100004b8:	f800283a 	ret

100004bc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
100004bc:	deffff04 	addi	sp,sp,-4
100004c0:	df000015 	stw	fp,0(sp)
100004c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
100004c8:	e037883a 	mov	sp,fp
100004cc:	df000017 	ldw	fp,0(sp)
100004d0:	dec00104 	addi	sp,sp,4
100004d4:	f800283a 	ret

100004d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100004d8:	defffc04 	addi	sp,sp,-16
100004dc:	dfc00315 	stw	ra,12(sp)
100004e0:	df000215 	stw	fp,8(sp)
100004e4:	dc000115 	stw	r16,4(sp)
100004e8:	df000104 	addi	fp,sp,4
100004ec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
100004f0:	e0bfff17 	ldw	r2,-4(fp)
100004f4:	108000d0 	cmplti	r2,r2,3
100004f8:	1000111e 	bne	r2,zero,10000540 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
100004fc:	04040034 	movhi	r16,4096
10000500:	84024c04 	addi	r16,r16,2352
10000504:	e0bfff17 	ldw	r2,-4(fp)
10000508:	1009883a 	mov	r4,r2
1000050c:	01400304 	movi	r5,12
10000510:	00008940 	call	10000894 <__mulsi3>
10000514:	8085883a 	add	r2,r16,r2
10000518:	10800204 	addi	r2,r2,8
1000051c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10000520:	04040034 	movhi	r16,4096
10000524:	84024c04 	addi	r16,r16,2352
10000528:	e0bfff17 	ldw	r2,-4(fp)
1000052c:	1009883a 	mov	r4,r2
10000530:	01400304 	movi	r5,12
10000534:	00008940 	call	10000894 <__mulsi3>
10000538:	8085883a 	add	r2,r16,r2
1000053c:	10000015 	stw	zero,0(r2)
  }
}
10000540:	e037883a 	mov	sp,fp
10000544:	dfc00217 	ldw	ra,8(sp)
10000548:	df000117 	ldw	fp,4(sp)
1000054c:	dc000017 	ldw	r16,0(sp)
10000550:	dec00304 	addi	sp,sp,12
10000554:	f800283a 	ret

10000558 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
10000558:	deffff04 	addi	sp,sp,-4
1000055c:	df000015 	stw	fp,0(sp)
10000560:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10000564:	000170fa 	wrctl	ienable,zero
}
10000568:	e037883a 	mov	sp,fp
1000056c:	df000017 	ldw	fp,0(sp)
10000570:	dec00104 	addi	sp,sp,4
10000574:	f800283a 	ret

10000578 <atexit>:
10000578:	200b883a 	mov	r5,r4
1000057c:	000d883a 	mov	r6,zero
10000580:	0009883a 	mov	r4,zero
10000584:	000f883a 	mov	r7,zero
10000588:	00005c41 	jmpi	100005c4 <__register_exitproc>

1000058c <exit>:
1000058c:	defffe04 	addi	sp,sp,-8
10000590:	000b883a 	mov	r5,zero
10000594:	dc000015 	stw	r16,0(sp)
10000598:	dfc00115 	stw	ra,4(sp)
1000059c:	2021883a 	mov	r16,r4
100005a0:	00006f40 	call	100006f4 <__call_exitprocs>
100005a4:	00840034 	movhi	r2,4096
100005a8:	1083b204 	addi	r2,r2,3784
100005ac:	11000017 	ldw	r4,0(r2)
100005b0:	20800f17 	ldw	r2,60(r4)
100005b4:	10000126 	beq	r2,zero,100005bc <exit+0x30>
100005b8:	103ee83a 	callr	r2
100005bc:	8009883a 	mov	r4,r16
100005c0:	00008bc0 	call	100008bc <_exit>

100005c4 <__register_exitproc>:
100005c4:	defffa04 	addi	sp,sp,-24
100005c8:	00840034 	movhi	r2,4096
100005cc:	1083b204 	addi	r2,r2,3784
100005d0:	dc000315 	stw	r16,12(sp)
100005d4:	14000017 	ldw	r16,0(r2)
100005d8:	dc400415 	stw	r17,16(sp)
100005dc:	dfc00515 	stw	ra,20(sp)
100005e0:	80805217 	ldw	r2,328(r16)
100005e4:	2023883a 	mov	r17,r4
100005e8:	10003e26 	beq	r2,zero,100006e4 <__register_exitproc+0x120>
100005ec:	10c00117 	ldw	r3,4(r2)
100005f0:	020007c4 	movi	r8,31
100005f4:	40c0180e 	bge	r8,r3,10000658 <__register_exitproc+0x94>
100005f8:	00800034 	movhi	r2,0
100005fc:	10800004 	addi	r2,r2,0
10000600:	1000061e 	bne	r2,zero,1000061c <__register_exitproc+0x58>
10000604:	00bfffc4 	movi	r2,-1
10000608:	dfc00517 	ldw	ra,20(sp)
1000060c:	dc400417 	ldw	r17,16(sp)
10000610:	dc000317 	ldw	r16,12(sp)
10000614:	dec00604 	addi	sp,sp,24
10000618:	f800283a 	ret
1000061c:	01006404 	movi	r4,400
10000620:	d9400015 	stw	r5,0(sp)
10000624:	d9800115 	stw	r6,4(sp)
10000628:	d9c00215 	stw	r7,8(sp)
1000062c:	00000000 	call	10000000 <__reset>
10000630:	d9400017 	ldw	r5,0(sp)
10000634:	d9800117 	ldw	r6,4(sp)
10000638:	d9c00217 	ldw	r7,8(sp)
1000063c:	103ff126 	beq	r2,zero,10000604 <__alt_data_end+0xf8000604>
10000640:	80c05217 	ldw	r3,328(r16)
10000644:	10000115 	stw	zero,4(r2)
10000648:	10c00015 	stw	r3,0(r2)
1000064c:	80805215 	stw	r2,328(r16)
10000650:	10006215 	stw	zero,392(r2)
10000654:	10006315 	stw	zero,396(r2)
10000658:	10c00117 	ldw	r3,4(r2)
1000065c:	88000d1e 	bne	r17,zero,10000694 <__register_exitproc+0xd0>
10000660:	19000084 	addi	r4,r3,2
10000664:	2109883a 	add	r4,r4,r4
10000668:	18c00044 	addi	r3,r3,1
1000066c:	2109883a 	add	r4,r4,r4
10000670:	1109883a 	add	r4,r2,r4
10000674:	10c00115 	stw	r3,4(r2)
10000678:	0005883a 	mov	r2,zero
1000067c:	21400015 	stw	r5,0(r4)
10000680:	dfc00517 	ldw	ra,20(sp)
10000684:	dc400417 	ldw	r17,16(sp)
10000688:	dc000317 	ldw	r16,12(sp)
1000068c:	dec00604 	addi	sp,sp,24
10000690:	f800283a 	ret
10000694:	02400044 	movi	r9,1
10000698:	12806217 	ldw	r10,392(r2)
1000069c:	48d2983a 	sll	r9,r9,r3
100006a0:	19000804 	addi	r4,r3,32
100006a4:	18d1883a 	add	r8,r3,r3
100006a8:	2109883a 	add	r4,r4,r4
100006ac:	4211883a 	add	r8,r8,r8
100006b0:	2109883a 	add	r4,r4,r4
100006b4:	1109883a 	add	r4,r2,r4
100006b8:	1211883a 	add	r8,r2,r8
100006bc:	5254b03a 	or	r10,r10,r9
100006c0:	21c02215 	stw	r7,136(r4)
100006c4:	41802215 	stw	r6,136(r8)
100006c8:	12806215 	stw	r10,392(r2)
100006cc:	01000084 	movi	r4,2
100006d0:	893fe31e 	bne	r17,r4,10000660 <__alt_data_end+0xf8000660>
100006d4:	11006317 	ldw	r4,396(r2)
100006d8:	2252b03a 	or	r9,r4,r9
100006dc:	12406315 	stw	r9,396(r2)
100006e0:	003fdf06 	br	10000660 <__alt_data_end+0xf8000660>
100006e4:	00840034 	movhi	r2,4096
100006e8:	10852a04 	addi	r2,r2,5288
100006ec:	80805215 	stw	r2,328(r16)
100006f0:	003fbe06 	br	100005ec <__alt_data_end+0xf80005ec>

100006f4 <__call_exitprocs>:
100006f4:	00840034 	movhi	r2,4096
100006f8:	1083b204 	addi	r2,r2,3784
100006fc:	10800017 	ldw	r2,0(r2)
10000700:	defff304 	addi	sp,sp,-52
10000704:	df000b15 	stw	fp,44(sp)
10000708:	d8800015 	stw	r2,0(sp)
1000070c:	10805204 	addi	r2,r2,328
10000710:	dd400815 	stw	r21,32(sp)
10000714:	dfc00c15 	stw	ra,48(sp)
10000718:	ddc00a15 	stw	r23,40(sp)
1000071c:	dd800915 	stw	r22,36(sp)
10000720:	dd000715 	stw	r20,28(sp)
10000724:	dcc00615 	stw	r19,24(sp)
10000728:	dc800515 	stw	r18,20(sp)
1000072c:	dc400415 	stw	r17,16(sp)
10000730:	dc000315 	stw	r16,12(sp)
10000734:	d9000115 	stw	r4,4(sp)
10000738:	2839883a 	mov	fp,r5
1000073c:	d8800215 	stw	r2,8(sp)
10000740:	057fffc4 	movi	r21,-1
10000744:	d8800017 	ldw	r2,0(sp)
10000748:	ddc00217 	ldw	r23,8(sp)
1000074c:	14805217 	ldw	r18,328(r2)
10000750:	90001726 	beq	r18,zero,100007b0 <__call_exitprocs+0xbc>
10000754:	94400117 	ldw	r17,4(r18)
10000758:	8c3fffc4 	addi	r16,r17,-1
1000075c:	80001116 	blt	r16,zero,100007a4 <__call_exitprocs+0xb0>
10000760:	8c400044 	addi	r17,r17,1
10000764:	8427883a 	add	r19,r16,r16
10000768:	8c63883a 	add	r17,r17,r17
1000076c:	95802204 	addi	r22,r18,136
10000770:	9ce7883a 	add	r19,r19,r19
10000774:	8c63883a 	add	r17,r17,r17
10000778:	b4e7883a 	add	r19,r22,r19
1000077c:	9463883a 	add	r17,r18,r17
10000780:	e0001726 	beq	fp,zero,100007e0 <__call_exitprocs+0xec>
10000784:	8c87c83a 	sub	r3,r17,r18
10000788:	b0c7883a 	add	r3,r22,r3
1000078c:	18c01e17 	ldw	r3,120(r3)
10000790:	1f001326 	beq	r3,fp,100007e0 <__call_exitprocs+0xec>
10000794:	843fffc4 	addi	r16,r16,-1
10000798:	9cffff04 	addi	r19,r19,-4
1000079c:	8c7fff04 	addi	r17,r17,-4
100007a0:	857ff71e 	bne	r16,r21,10000780 <__alt_data_end+0xf8000780>
100007a4:	00800034 	movhi	r2,0
100007a8:	10800004 	addi	r2,r2,0
100007ac:	10002a1e 	bne	r2,zero,10000858 <__call_exitprocs+0x164>
100007b0:	dfc00c17 	ldw	ra,48(sp)
100007b4:	df000b17 	ldw	fp,44(sp)
100007b8:	ddc00a17 	ldw	r23,40(sp)
100007bc:	dd800917 	ldw	r22,36(sp)
100007c0:	dd400817 	ldw	r21,32(sp)
100007c4:	dd000717 	ldw	r20,28(sp)
100007c8:	dcc00617 	ldw	r19,24(sp)
100007cc:	dc800517 	ldw	r18,20(sp)
100007d0:	dc400417 	ldw	r17,16(sp)
100007d4:	dc000317 	ldw	r16,12(sp)
100007d8:	dec00d04 	addi	sp,sp,52
100007dc:	f800283a 	ret
100007e0:	91000117 	ldw	r4,4(r18)
100007e4:	88c00017 	ldw	r3,0(r17)
100007e8:	213fffc4 	addi	r4,r4,-1
100007ec:	24001526 	beq	r4,r16,10000844 <__call_exitprocs+0x150>
100007f0:	88000015 	stw	zero,0(r17)
100007f4:	183fe726 	beq	r3,zero,10000794 <__alt_data_end+0xf8000794>
100007f8:	00800044 	movi	r2,1
100007fc:	1408983a 	sll	r4,r2,r16
10000800:	91406217 	ldw	r5,392(r18)
10000804:	95000117 	ldw	r20,4(r18)
10000808:	214a703a 	and	r5,r4,r5
1000080c:	28000b26 	beq	r5,zero,1000083c <__call_exitprocs+0x148>
10000810:	91406317 	ldw	r5,396(r18)
10000814:	2148703a 	and	r4,r4,r5
10000818:	20000c1e 	bne	r4,zero,1000084c <__call_exitprocs+0x158>
1000081c:	99400017 	ldw	r5,0(r19)
10000820:	d9000117 	ldw	r4,4(sp)
10000824:	183ee83a 	callr	r3
10000828:	90c00117 	ldw	r3,4(r18)
1000082c:	1d3fc51e 	bne	r3,r20,10000744 <__alt_data_end+0xf8000744>
10000830:	b8c00017 	ldw	r3,0(r23)
10000834:	1cbfd726 	beq	r3,r18,10000794 <__alt_data_end+0xf8000794>
10000838:	003fc206 	br	10000744 <__alt_data_end+0xf8000744>
1000083c:	183ee83a 	callr	r3
10000840:	003ff906 	br	10000828 <__alt_data_end+0xf8000828>
10000844:	94000115 	stw	r16,4(r18)
10000848:	003fea06 	br	100007f4 <__alt_data_end+0xf80007f4>
1000084c:	99000017 	ldw	r4,0(r19)
10000850:	183ee83a 	callr	r3
10000854:	003ff406 	br	10000828 <__alt_data_end+0xf8000828>
10000858:	90c00117 	ldw	r3,4(r18)
1000085c:	1800071e 	bne	r3,zero,1000087c <__call_exitprocs+0x188>
10000860:	90c00017 	ldw	r3,0(r18)
10000864:	18000926 	beq	r3,zero,1000088c <__call_exitprocs+0x198>
10000868:	9009883a 	mov	r4,r18
1000086c:	b8c00015 	stw	r3,0(r23)
10000870:	00000000 	call	10000000 <__reset>
10000874:	bc800017 	ldw	r18,0(r23)
10000878:	003fb506 	br	10000750 <__alt_data_end+0xf8000750>
1000087c:	90c00017 	ldw	r3,0(r18)
10000880:	902f883a 	mov	r23,r18
10000884:	1825883a 	mov	r18,r3
10000888:	003fb106 	br	10000750 <__alt_data_end+0xf8000750>
1000088c:	0007883a 	mov	r3,zero
10000890:	003ffb06 	br	10000880 <__alt_data_end+0xf8000880>

10000894 <__mulsi3>:
10000894:	0005883a 	mov	r2,zero
10000898:	20000726 	beq	r4,zero,100008b8 <__mulsi3+0x24>
1000089c:	20c0004c 	andi	r3,r4,1
100008a0:	2008d07a 	srli	r4,r4,1
100008a4:	18000126 	beq	r3,zero,100008ac <__mulsi3+0x18>
100008a8:	1145883a 	add	r2,r2,r5
100008ac:	294b883a 	add	r5,r5,r5
100008b0:	203ffa1e 	bne	r4,zero,1000089c <__alt_data_end+0xf800089c>
100008b4:	f800283a 	ret
100008b8:	f800283a 	ret

100008bc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
100008bc:	defffc04 	addi	sp,sp,-16
100008c0:	df000315 	stw	fp,12(sp)
100008c4:	df000304 	addi	fp,sp,12
100008c8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
100008cc:	0001883a 	nop
100008d0:	e0bfff17 	ldw	r2,-4(fp)
100008d4:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
100008d8:	e0bffd17 	ldw	r2,-12(fp)
100008dc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
100008e0:	e0bffe17 	ldw	r2,-8(fp)
100008e4:	10000226 	beq	r2,zero,100008f0 <_exit+0x34>
    ALT_SIM_FAIL();
100008e8:	002af070 	cmpltui	zero,zero,43969
100008ec:	00000106 	br	100008f4 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
100008f0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
100008f4:	003fff06 	br	100008f4 <__alt_data_end+0xf80008f4>
